rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.token.email == userId + '@pseudo.apprentissage';
    }

    function stringMax(value, maxLen) {
      return value is string && value.size() <= maxLen;
    }

    function optionalString(value, maxLen) {
      return value == null || stringMax(value, maxLen);
    }

    function isTimestamp(value) {
      return value is timestamp;
    }

    function optionalTimestamp(value) {
      return value == null || value is timestamp;
    }

    function isValidNote(data) {
      return data.keys().hasOnly(['title', 'contentHtml', 'createdAt', 'updatedAt']) &&
             'title' in data && stringMax(data.title, 200) &&
             'contentHtml' in data && optionalString(data.contentHtml, 50000) &&
             'createdAt' in data && isTimestamp(data.createdAt) &&
             (!('updatedAt' in data) || optionalTimestamp(data.updatedAt));
    }

    match /users/{userId} {
      allow read: if isOwner(userId);

      allow create: if isOwner(userId) &&
                    request.resource.data.keys().hasOnly(['createdAt']) &&
                    isTimestamp(request.resource.data.createdAt);

      allow delete: if isOwner(userId);

      match /notes/{noteId} {
        allow read: if isOwner(userId);

        allow create: if isOwner(userId) &&
                      isValidNote(request.resource.data);

        allow update: if isOwner(userId) &&
                      isValidNote(request.resource.data) &&
                      request.resource.data.createdAt == resource.data.createdAt;

        allow delete: if isOwner(userId);
      }
    }
  }
}
