rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function adminData() {
      return isSignedIn()
        ? get(/databases/$(database)/documents/config/admins).data
        : null;
    }

    function isAdmin() {
      let data = adminData();
      return data != null && data[request.auth.uid] == true;
    }

    function hasOnlyFields(data, allowedFields) {
      return data.keys().hasOnly(allowedFields);
    }

    function isOptionalString(value) {
      return value == null || value is string;
    }

    function isOptionalNumber(value) {
      return value == null || value is number;
    }

    function isOptionalTimestamp(value) {
      return value == null || value is timestamp;
    }

    function isOptionalBoolean(value) {
      return value == null || value is bool;
    }

    function isValidMembersMap(members) {
      return members == null || (
        members is map &&
        members.values().hasOnly(['viewer', 'editor'])
      );
    }

    function memberRole(data) {
      return data.members is map ? data.members[request.auth.uid] : null;
    }

    function isEditor(data) {
      return memberRole(data) == 'editor';
    }

    function canMemberRead(data) {
      let role = memberRole(data);
      return role == 'viewer' || role == 'editor';
    }

    function isValidNoteData(data, userId) {
      return hasOnlyFields(data, [
          'title',
          'contentHtml',
          'createdAt',
          'updatedAt',
          'parentId',
          'position',
          'members',
          'published',
          'ownerUid'
        ]) &&
        data.title is string &&
        data.contentHtml is string &&
        data.createdAt is timestamp &&
        data.updatedAt is timestamp &&
        isOptionalString(data.parentId) &&
        isOptionalNumber(data.position) &&
        isOptionalBoolean(data.published) &&
        data.ownerUid is string &&
        data.ownerUid == userId &&
        isValidMembersMap(data.members);
    }

    function isValidNoteUpdate(newData, currentData, userId) {
      return isValidNoteData(newData, userId) &&
        newData.createdAt == currentData.createdAt &&
        newData.ownerUid == currentData.ownerUid;
    }

    function editorUpdateIsLimited(newData, currentData) {
      let diff = newData.diff(currentData).affectedKeys();
      return diff.hasOnly(['title', 'contentHtml', 'updatedAt']);
    }

    function membersUnchanged(newData, currentData) {
      return newData.members == currentData.members;
    }

    match /config/{documentId} {
      allow get: if true;
      allow list, create, update, delete: if false;
    }

    match /profiles/{userId} {
      function isValidProfileData(data) {
        return hasOnlyFields(data, ['pseudo', 'createdAt', 'updatedAt']) &&
          (data.pseudo == null || data.pseudo is string) &&
          isOptionalTimestamp(data.createdAt) &&
          isOptionalTimestamp(data.updatedAt);
      }

      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidProfileData(request.resource.data);
      allow update: if isOwner(userId) &&
        isValidProfileData(request.resource.data) &&
        request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isOwner(userId);
    }

    match /users/{userId} {
      allow read, write: if false;

      function isValidCourseData(data, userId) {
        return hasOnlyFields(data, [
            'title',
            'name',
            'coverImageUrl',
            'coverUrl',
            'createdAt',
            'updatedAt',
            'ownerUid',
            'ownerEmail'
          ]) &&
          isOptionalString(data.title) &&
          isOptionalString(data.name) &&
          isOptionalString(data.coverImageUrl) &&
          isOptionalString(data.coverUrl) &&
          isOptionalTimestamp(data.createdAt) &&
          isOptionalTimestamp(data.updatedAt) &&
          data.ownerUid is string &&
          data.ownerUid == userId &&
          isOptionalString(data.ownerEmail);
      }

      function isValidCourseCreate(data, userId) {
        return isValidCourseData(data, userId) &&
          data.createdAt is timestamp &&
          data.updatedAt is timestamp &&
          ((data.title is string && data.title.size() > 0) ||
            (data.name is string && data.name.size() > 0));
      }

      function isValidCourseUpdate(newData, currentData, userId) {
        return isValidCourseData(newData, userId) &&
          newData.createdAt == currentData.createdAt &&
          newData.ownerUid == currentData.ownerUid &&
          newData.ownerEmail == currentData.ownerEmail;
      }

      match /notes/{noteId} {
        allow create: if isOwner(userId) &&
          isValidNoteData(request.resource.data, userId);

        allow read: if resource != null && (
          isOwner(userId) ||
          isAdmin() ||
          canMemberRead(resource.data) ||
          (resource.data.published == true)
        );

        allow update: if resource != null && (
          (isOwner(userId) || isAdmin()) &&
            isValidNoteUpdate(request.resource.data, resource.data, userId) ||
          (isSignedIn() && isEditor(resource.data) &&
            editorUpdateIsLimited(request.resource.data, resource.data) &&
            membersUnchanged(request.resource.data, resource.data) &&
            request.resource.data.published == resource.data.published)
        );

        allow delete: if resource != null && (isOwner(userId) || isAdmin());
      }

      match /courses/{courseId} {
        allow create: if isOwner(userId) &&
          isValidCourseCreate(request.resource.data, userId);

        allow read: if resource != null && (isOwner(userId) || isAdmin());

        allow update: if resource != null &&
          (isOwner(userId) || isAdmin()) &&
          isValidCourseUpdate(request.resource.data, resource.data, userId);

        allow delete: if resource != null && (isOwner(userId) || isAdmin());
      }
    }
  }
}
